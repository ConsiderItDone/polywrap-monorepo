{{#methods.length}}
use polywrap_wasm_rs::{
  wrap_load_env
};

use crate::{
    {{#methods}}
    {{#toLower}}{{name}}{{/toLower}},
    Input{{#toUpper}}{{name}}{{/toUpper}},
    deserialize_{{#toLower}}{{name}}{{/toLower}}_args,
    serialize_{{#toLower}}{{name}}{{/toLower}}_result{{^last}},{{/last}}
    {{/methods}}
};
{{/methods.length}}

use crate::Env;

{{#methods}}
pub fn {{#toLower}}{{name}}{{/toLower}}_wrapped(input: &[u8], env_size: u32) -> Vec<u8> {
    {{#env}}
    {{#required}}
    if env_size == 0 {
        panic!("Environment is not set, and it is required by method 'objectMethod'");
    }

    let env_buf = wrap_load_env(env_size);
    let env = Env.from_buffer(env_buf);

    {{/required}}
    {{^required}}
    let env: Option<Env> = None;

    if env_size > 0 {
      let env_buf = wrap_load_env(env_size);
      env = Some(Env.from_buffer(env_buf));
    }

    {{/required}}
    {{/env}}
    {{#arguments.length}}
    match deserialize_{{#toLower}}{{name}}{{/toLower}}_args(input) {
        Ok(args) => {
    {{/arguments.length}}
            let result = {{#toLower}}{{name}}{{/toLower}}({{#arguments.length}}Input{{#toUpper}}{{name}}{{/toUpper}} {
                {{#arguments}}
                {{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}: args.{{#toLower}}{{name}}{{/toLower}},
                {{/arguments}}
            }{{/arguments.length}}{{#env}}, env{{/env}});
            serialize_{{#toLower}}{{name}}{{/toLower}}_result({{#return}}&{{/return}}result).unwrap()
    {{#arguments.length}}
        }
        Err(e) => {
            panic!("{}", e.to_string())
        }
    }
    {{/arguments.length}}
}
{{^last}}

{{/last}}
{{/methods}}