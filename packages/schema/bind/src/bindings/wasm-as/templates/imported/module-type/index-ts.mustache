{{#__commonImport}}
export { {{type}} } from "../../common";
{{/__commonImport}}
{{^__commonImport}}
import {
  w3_subinvoke,
  Nullable,
  BigInt,
  JSON,
  Result
} from "@web3api/wasm-as";
{{#methods.length}}
import {
  {{#methods}}
  serialize{{name}}Args,
  deserialize{{name}}Result,
  Input_{{name}}{{^last}},{{/last}}
  {{/methods}}
} from "./serialization";
{{/methods.length}}
import * as Types from "../..";

{{^isInterface}}
export namespace {{type}} {

  export const uri: string = "{{uri}}";

  {{#methods}}
  export function {{name}}(
    input: Input_{{name}}
  ): {{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}} {
    return Try.{{name}}(input).unwrap();
  }
  {{^last}}

  {{/last}}
  {{/methods}}

  export namespace Try {

    {{#methods}}
    export function {{name}}(
      input: Input_{{name}}
    ): Result<{{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}, string> {
      const args = serialize{{name}}Args(input);
      const result = w3_subinvoke(
        "{{uri}}",
        "{{type}}",
        "{{name}}",
        args
      );

      if (result.isErr) {
        return Result.Err<{{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}, string>(
          result.unwrapErr()
        );
      }

      return Result.Ok<{{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}, string>(
        deserialize{{name}}Result(result.unwrap())
      );
    }
    {{^last}}

    {{/last}}
    {{/methods}}
  }
}
{{/isInterface}}
{{#isInterface}}
export namespace {{type}} {

  export namespace Interface {

    export const uri: string = "{{uri}}";

    {{#methods}}
    export function {{name}}(
      input: Input_{{name}},
      implementationUri: string
    ): {{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}} {
      return Try.{{name}}(input, implementationUri).unwrap();
    }
    {{^last}}

    {{/last}}
    {{/methods}}

    export namespace Try {

      {{#methods}}
      export function {{name}}(
        input: Input_{{name}},
        implementationUri: string
      ): Result<{{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}, string> {
        const args = serialize{{name}}Args(input);
        const result = w3_subinvoke(
          implementationUri,
          "{{type}}",
          "{{name}}",
          args
        );

        if (result.isErr) {
          return Result.Err<{{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}, string>(
            result.unwrapErr()
          );
        }

        return Result.Ok<{{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}, string>(
          deserialize{{name}}Result(result.unwrap())
        );
      }
      {{^last}}

      {{/last}}
      {{/methods}}
    }
  }
}
{{/isInterface}}
{{/__commonImport}}
