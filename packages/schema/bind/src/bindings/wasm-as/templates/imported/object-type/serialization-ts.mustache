import {
  Read,
  ReadDecoder,
  Write,
  WriteSizer,
  WriteEncoder,
  Nullable
} from "@web3api/wasm-as";
import { {{type}} } from "./";
import * as Objects from "../..";

export function serialize{{type}}(type: {{type}}): ArrayBuffer {
  const objects: (ArrayBuffer | null)[] = [
    {{#properties}}{{#object}}
    {{#required}}
    Objects.{{type}}.toBuffer(type.{{name}}),
    {{/required}}
    {{^required}}
    type.{{name}} ? Objects.{{type}}.toBuffer(type.{{name}}) : null,
    {{/required}}
    {{/object}}{{/properties}}
  ];
  const sizer = new WriteSizer();
  write{{type}}(sizer, type, objects);
  const buffer = new ArrayBuffer(sizer.length);
  const encoder = new WriteEncoder(buffer);
  write{{type}}(encoder, type, objects);
  return buffer;
}

function write{{type}}(writer: Write, type: {{type}}, objects: (ArrayBuffer | null)[]): void {
  let objectsIdx = 0;
  writer.writeMapLength({{properties.length}});
  {{#properties}}
  writer.writeString("{{name}}");
  {{#scalar}}
  writer.write{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}(type.{{name}});
  {{/scalar}}
  {{#array}}
  writer.write{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}(type.{{name}}, (writer: Write, item: {{#item}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/item}}): void => {
    {{> serialize_array}}
  });
  {{/array}}
  {{#object}}
  writer.writeNullableBytes(objects[objectsIdx++]);
  {{/object}}
  {{/properties}}
}

export function deserialize{{type}}(buffer: ArrayBuffer): {{type}} {
  const reader = new ReadDecoder(buffer);
  var numFields = reader.readMapLength();

  {{#properties}}
  {{^object}}
  var _{{name}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
  {{/object}}
  {{#object}}
  {{#required}}
  var _{{name}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} | null = null;
  {{/required}}
  {{^required}}
  var _{{name}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
  {{/required}}
  {{/object}}
  {{#required}}
  var _{{name}}Set: bool = false;
  {{/required}}
  {{/properties}}

  while (numFields > 0) {
    numFields--;
    const field = reader.readString();

    {{#properties}}
    {{^first}}else {{/first}}if (field == "{{name}}") {
      {{#scalar}}
      _{{name}} = reader.read{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}();
      {{/scalar}}
      {{#array}}
      _{{name}} = reader.read{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}((reader: Read): {{#item}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/item}} => {
        {{> deserialize_array}}
      });
      {{/array}}
      {{#object}}
      {{> deserialize_object }}
      _{{name}} = object;
      {{/object}}
      {{#required}}
      _{{name}}Set = true;
      {{/required}}
    }
    {{/properties}}
  }

  {{#properties}}
  {{#required}}
  {{^object}}
  if (!_{{name}}Set) {
  {{/object}}
  {{#object}}
  if (!_{{name}} || !_{{name}}Set) {
  {{/object}}
    throw Error("Missing required property: '{{name}}: {{type}}'");
  }
  {{/required}}
  {{/properties}}

  return {
    {{#properties}}
    {{name}}: _{{name}}{{^last}},{{/last}}
    {{/properties}}
  };
}
