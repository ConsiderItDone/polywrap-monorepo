{{^__commonImport}}
pub use super::super::common::{{type}};
use super::super::{get_{{#toLower}}{{type}}{{/toLower}}_value, sanitize_{{#toLower}}{{type}}{{/toLower}}_value};
use super::{ {{type}}, };
use crate::{Context, Read, ReadDecoder, Write, WriteEncoder, WriteSizer};
use std::convert::TryFrom;
use std::io::{Error, ErrorKind, Result};

pub fn serialize_{{#toLower}}{{type}}{{/toLower}}(mut object: {{type}}) -> Vec<u8> {
    let mut sizer_context = Context::new();
    sizer_context.description =
        "Serializing (sizing) imported object-type: {{type}}".to_string();
    let mut sizer = WriteSizer::new(sizer_context);
    write_{{#toLower}}{{type}}{{/toLower}}(&mut sizer, &mut object);

    let buffer: Vec<u8> = Vec::with_capacity(sizer.get_length() as usize);
    let mut encoder_context = Context::new();
    encoder_context.description =
        "Serializing (encoding) imported object-type: {{type}}".to_string();
    let mut encoder = WriteEncoder::new(buffer.as_slice(), encoder_context);
    write_{{#toLower}}{{type}}{{/toLower}}(&mut encoder, &mut object);
    buffer
}

pub fn write_{{#toLower}}{{type}}{{/toLower}}<W: Write>(mut writer: &mut W, object: &mut {{type}}) {
    writer.write_map_length({{properties.length}});
    {{#properties}}
    writer
        .context()
        .push("{{#toLower}}{{name}}{{/toLower}}", "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "writing property");
    writer.write_string(&"{{#toLower}}{{name}}{{/toLower}}".to_string());
    {{#scalar}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(&object.{{#toLower}}{{name}}{{/toLower}});
    {{/scalar}}
    {{#array}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(object.{{#toLower}}{{name}}{{/toLower}}.as_slice(), |writer: &mut W, {{#toWasm}}{{toGraphQLType}}{{/toWasm}}| {
        {{> serialize_array}}
    });
    {{/array}}
    {{#object}}
    {{#required}}
    {{type}}::write(&mut object.{{#toLower}}{{name}}{{/toLower}}.clone(), &mut writer);
    {{/required}}
    {{^required}}
    if object.{{#toLower}}{{name}}{{/toLower}}.is_some() {
        {{type}}::write(&mut object.{{#toLower}}{{name}}{{/toLower}}.clone().unwrap(), &mut writer);
    } else {
        writer.write_nil();
    }
    {{/required}}
    {{/object}}
    {{#enum}}
    {{#required}}
    writer.write_i32(&(object.{{#toLower}}{{name}}{{/toLower}}.clone() as i32));
    {{/required}}
    {{^required}}
    writer
        .write_nullable_i32(Some(object.{{#toLower}}{{name}}{{/toLower}}.clone().unwrap() as i32))
        .expect("Failed to write nullable i32");
    {{/required}}
    {{/enum}}
    writer
        .context()
        .pop()
        .expect("Failed to pop {{#toLower}}{{name}}{{/toLower}} from Context");
    {{/properties}}
}

pub fn deserialize_{{#toLower}}{{type}}{{/toLower}}(buffer: &[u8]) -> {{type}} {
    let mut context = Context::new();
    context.description = "Deserializing imported object-type: {{type}}".to_string();
    let mut reader = ReadDecoder::new(buffer, context);
    read_{{#toLower}}{{type}}{{/toLower}}(&mut reader).expect("Failed to deserialize {{type}}")
}

pub fn read_{{#toLower}}{{type}}{{/toLower}}<R: Read>(reader: &mut R) -> Result<{{type}}> {
    let mut num_of_fields = reader.read_map_length().unwrap_or_default();

    {{#properties}}
    {{^object}}
    let mut {{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
    {{/object}}
    {{#object}}
    {{#required}}
    let mut {{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = None;
    {{/required}}
    {{^required}}
    let mut {{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
    {{/required}}
    {{/object}}
    {{#required}}
    let mut {{#toLower}}{{name}}{{/toLower}}_set = false;
    {{/required}}
    {{/properties}}

    while num_of_fields > 0 {
        num_of_fields -= 1;
        let field = reader.read_string().unwrap_or_default();

        {{#properties}}
        match field.as_str() {
            "{{#toLower}}{{name}}{{/toLower}}" => {
                reader.context().push(
                    &field,
                    "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}",
                    "type found, reading property",
                );
                {{#scalar}}
                {{#toLower}}{{name}}{{/toLower}} = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}().unwrap_or_default();
                {{/scalar}}
                {{#array}}
                {{#toLower}}{{name}}{{/toLower}} = reader
                    .read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(|reader| {{#toWasm}}{{toGraphQLType}}{{/toWasm}} {
                      {{> deserialize_array}}
                    })
                    .expect("Failed to read {{#toLower}}{{name}}{{/toLower}}");
                {{/array}}
                {{#enum}}
                {{> deserialize_enum}}
                {{/enum}}
                {{#object}}
                {{> deserialize_object}}
                {{/object}}
                {{#required}}
                {{#toLower}}{{name}}{{/toLower}}_set = true;
                {{/required}}
                reader
                    .context()
                    .pop()
                    .expect("Failed to pop {{#toLower}}{{name}}{{/toLower}} from Context");
                reader
                    .context()
                    .push(&field, "unknown", "searching for property type");
                reader
                    .context()
                    .pop()
                    .expect("Failed to pop unknown object from Context");
            }
        }
        {{/properties}}
    }

    {{#properties}}
    {{#required}}
    {{#object}}
    if !{{#toLower}}{{name}}{{/toLower}}_set {
    {{/object}}
        let custom_error = reader
            .context()
            .print_with_context("Missing required property: '{{#toLower}}{{name}}{{/toLower}}: {{#toUpper}}{{type}}{{/toUpper}}'");
        return Err(Error::new(ErrorKind::Other, custom_error));
    }
    {{/required}}
    {{/properties}}

    Ok({{type}} {
        {{#properties}}
        {{#toLower}}{{name}}{{/toLower}},
        {{/properties}}
    })
}
{{/__commonImport}}