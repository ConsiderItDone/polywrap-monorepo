{{#__commonImport}}
pub use super::super::common::TestImportQuery;
use crate::TestImportObject;
{{/__commonImport}}
{{^__commonImport}}
{{#methods.length}}
pub mod serialization;
pub use serialization::{
    {{#methods}}
    deserialize_{{#toLower}}{{name}}{{/toLower}}_result,
    serialize_{{#toLower}}{{name}}{{/toLower}}_args,
    Input{{#toUpper}}{{name}}{{/toUpper}},
    {{/methods}}
};
{{/methods.length}}
use crate::subinvoke;
use serde::{
    Deserialize, 
    Serialize,
};

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct {{type}};

impl {{type}} {
    pub const URI: &'static str = "{{uri}}";
    
    {{#methods}}
    pub fn {{#toLower}}{{name}}{{/toLower}}(input: &Input{{#toUpper}}{{name}}{{/toUpper}}) -> {{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}} {
        let uri = {{type}}::URI;
        let args = serialize_{{#toLower}}{{name}}{{/toLower}}_args(input);
        let result = subinvoke::w3_subinvoke(
            uri.to_string(),
            "{{#toLower}}{{type}}{{/toLower}}".to_string(),
            "{{#toLower}}{{name}}{{/toLower}}".to_string(),
            args,
        )
        .unwrap_or_default();
        deserialize_{{#toLower}}{{name}}{{/toLower}}_result(result.as_slice())
    }
    {{^last}}

    {{/last}}
    {{/methods}}
}
{{/__commonImport}}