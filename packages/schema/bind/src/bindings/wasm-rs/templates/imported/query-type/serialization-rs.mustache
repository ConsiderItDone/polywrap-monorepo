{{^__commonImport}}
{{#methods.length}}
use polywrap_wasm_rs::{
    Context, 
    Read, 
    ReadDecoder, 
    Write, 
    WriteEncoder, 
    WriteSizer,
};
use crate::{ 
    {{#toUpper}}{{type}}{{/toUpper}}, 
};
use serde::{
    Deserialize, 
    Serialize,
};

{{#methods}}
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Input{{#toUpper}}{{name}}{{/toUpper}} {
    {{#arguments}}
    pub {{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}},
    {{/arguments}}
}

pub fn serialize_{{#toLower}}{{name}}{{/toLower}}_args(input: &Input{{#toUpper}}{{name}}{{/toUpper}}) -> Vec<u8> {
    let mut sizer_context = Context::new();
    sizer_context.description = "Serializing (sizing) imported query-type: Input{{#toUpper}}{{name}}{{/toUpper}}".to_string();
    let mut sizer = WriteSizer::new(sizer_context);
    write_{{#toLower}}{{name}}{{/toLower}}_args(input, &mut sizer);
    let buffer: Vec<u8> = Vec::with_capacity(sizer.get_length() as usize);
    let mut encoder_context = Context::new();
    encoder_context.description = "Serializing (encoding) imported query-type: Input{{#toUpper}}{{name}}{{/toUpper}}".to_string();
    let mut encoder = WriteEncoder::new(&buffer, encoder_context);
    write_{{#toLower}}{{name}}{{/toLower}}_args(input, &mut encoder);
    buffer
}

pub fn write_{{#toLower}}{{name}}{{/toLower}}_args<W: Write>(input: &Input{{#toUpper}}{{name}}{{/toUpper}}, writer: &mut W) {
    writer.write_map_length({{arguments.length}});
    {{#arguments}}
    writer.context().push("{{#toLower}}{{name}}{{/toLower}}", "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "writing property");
    writer.write_string("{{#toLower}}{{name}}{{/toLower}}");
    {{#scalar}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}({{#byRef}}&{{/byRef}}input.{{#toLower}}{{name}}{{/toLower}});
    {{/scalar}}
    {{#array}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(&input.{{#toLower}}{{name}}{{/toLower}}, |writer: &mut W, item| {
        {{> serialize_array}}
    });
    {{/array}}
    {{#enum}}
    {{#required}}
    writer.write_i32(input.{{#toLower}}{{name}}{{/toLower}} as i32);
    {{/required}}
    {{^required}}
    writer.write_nullable_i32(&Some(input.{{#toLower}}{{name}}{{/toLower}}.unwrap() as i32));
    {{/required}}
    {{/enum}}
    {{#object}}
    {{#required}}
    {{#toUpper}}{{type}}{{/toUpper}}::write(&input.{{#toLower}}{{name}}{{/toLower}}, writer);
    {{/required}}
    {{^required}}
    if input.{{#toLower}}{{name}}{{/toLower}}.is_some() {
        {{#toUpper}}{{type}}{{/toUpper}}::write(input.{{#toLower}}{{name}}{{/toLower}}.as_ref().as_ref().unwrap(), writer);
    } else {
        writer.write_nil();
    }
    {{/required}}
    {{/object}}
    writer.context().pop();
    {{/arguments}}
}

pub fn deserialize_{{#toLower}}{{name}}{{/toLower}}_result(input: &[u8]) -> {{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}} {
    let mut context = Context::new();
    context.description = "Deserializing imported query-type: {{#toUpper}}{{name}}{{/toUpper}}".to_string();
    let mut reader = ReadDecoder::new(input, context);
    {{#return}}
    reader.context().push("{{#toLower}}{{name}}{{/toLower}}", "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "reading function output");
    {{#scalar}}
    let res = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}().unwrap_or_default();
    {{/scalar}}
    {{#array}}
    let res = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(|reader| {
        {{> deserialize_array}}
    }).expect("Failed to read array");
    {{/array}}
    {{#enum}}
    {{> deserialize_enum}}
    {{/enum}}
    {{#object}}
    {{> deserialize_object}}
    {{/object}}
    {{/return}}
    reader.context().pop();
    res
}
{{^last}}

{{/last}}
{{/methods}}
{{/methods.length}}
{{/__commonImport}}
