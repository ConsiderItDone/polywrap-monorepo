{{#methods.length}}
use crate::{
    {{#methods}}
    deserialize_{{#toLower}}{{name}}{{/toLower}}_args,
    serialize_{{#toLower}}{{name}}{{/toLower}}_result,
    {{/methods}}
};
{{/methods.length}}

{{#methods}}
pub fn {{#toLower}}{{name}}{{/toLower}}_wrapped(args_buf: &[u8]) -> Vec<u8> {
    let query_method = deserialize_{{#toLower}}{{name}}{{/toLower}}_args(args_buf).unwrap();
    let args = bincode::serialize(&query_method).expect("Failed to serialize Input{{#toUpper}}{{name}}{{/toUpper}}");
    let result = args.as_ptr() as i32;
    serialize_{{#toLower}}{{name}}{{/toLower}}_result(result)
}

pub fn {{#toLower}}{{name}}{{/toLower}}_wrapped(args_buf: &[u8]) -> Vec<u8> {
    let object_method = deserialize_object_method_args(args_buf).unwrap();
    serialize_object_method_result(&object_method.opt_object)
}
{{/methods}}