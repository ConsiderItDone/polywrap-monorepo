{{#methods.length}}
use crate::{
    deserialize_{{#toLower}}{{name}}{{/toLower}}_args, 
    {{#toLower}}{{name}}{{/toLower}}, 
    serialize_{{#toLower}}{{name}}{{/toLower}}_result, 
    Input{{#toUpper}}{{name}}{{/toUpper}},
};
{{/methods.length}}

{{#methods}}
pub fn {{#toLower}}{{name}}{{/toLower}}_wrapped(input: &[u8]) -> Vec<u8> {
    {{#arguments.length}}
    let args = deserialize_{{#toLower}}{{name}}{{/toLower}}_args(input).expect("Failed to deserialize buffer");
    {{/arguments.length}}
    let result = {{#toLower}}{{name}}{{/toLower}}(Input{{#toUpper}}{{name}}{{/toUpper}} {{#arguments.length}}{
        {{#arguments}}
        {{#toLower}}{{name}}{{/toLower}}: args.{{#toLower}}{{name}}{{/toLower}},
        {{/arguments}}
    }{{/arguments.length}});
    serialize_{{#toLower}}{{name}}{{/toLower}}_result(result)
}
{{^last}}

{{/last}}
{{/methods}}