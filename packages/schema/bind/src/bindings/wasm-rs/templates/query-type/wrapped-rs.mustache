use alloc::vec::Vec;
{{#methods.length}}
use crate::{
    {{#methods}}
    {{#toLower}}{{name}}{{/toLower}},
    Input{{#toUpper}}{{name}}{{/toUpper}},
    deserialize_{{#toLower}}{{name}}{{/toLower}}_args,
    serialize_{{#toLower}}{{name}}{{/toLower}}_result,
    {{/methods}}
};
{{/methods.length}}

#[link(wasm_import_module = "w3")]
extern "C" {
    pub fn __w3_log(ptr: u32, len: u32);
}

{{#methods}}
pub fn {{#toLower}}{{name}}{{/toLower}}_wrapped(input: &[u8]) -> Vec<u8> {
    let start = String::from("start {{#toLower}}{{name}}{{/toLower}}");
    unsafe { __w3_log(start.as_ptr() as u32, start.len() as u32) };
    {{#arguments.length}}
    let des = String::from("des {{#toLower}}{{name}}{{/toLower}}");
    unsafe { __w3_log(des.as_ptr() as u32, des.len() as u32) };
    let args = deserialize_{{#toLower}}{{name}}{{/toLower}}_args(input).expect("Failed to deserialize buffer");
    {{/arguments.length}}
    let end = String::from("end {{#toLower}}{{name}}{{/toLower}}");
    unsafe { __w3_log(end.as_ptr() as u32, end.len() as u32) };
    let result = {{#toLower}}{{name}}{{/toLower}}(Input{{#toUpper}}{{name}}{{/toUpper}} {{#arguments.length}}{
        {{#arguments}}
        {{#toLower}}{{name}}{{/toLower}}: args.{{#toLower}}{{name}}{{/toLower}},
        {{/arguments}}
    }{{/arguments.length}});
    serialize_{{#toLower}}{{name}}{{/toLower}}_result({{#return}}{{#byRef}}&{{/byRef}}{{/return}}result)
}
{{^last}}

{{/last}}
{{/methods}}
