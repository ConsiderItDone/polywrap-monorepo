{{#methods.length}}
use crate::{
    {{#methods}}
    deserialize_{{#toLower}}{{name}}{{/toLower}}_args,
    serialize_{{#toLower}}{{name}}{{/toLower}}_result,
    {{/methods}}
};
use crate::{
    {{#methods}}
    {{#toLower}}{{name}}{{/toLower}},
    {{#toUpper}}{{name}}{{/toUpper}},
    {{/methods}}
};
{{/methods.length}}

{{#methods}}
pub fn {{#toLower}}{{name}}{{/toLower}}_wrapped(args_buf: &[u8]) -> Vec<u8> {
    {{#arguments.length}}
    let args = deserialize_{{#toLower}}{{name}}{{/toLower}}_args(args_buf).expect("Failed to deserialize buffer");
    {{/arguments.length}}
    let result = {{#toLower}}{{name}}{{/toLower}}({{#toUpper}}{{name}}{{/toUpper}} {{#arguments.length}}{
        {{#arguments}}
        {{#toRustProp}}{{#toLower}}{{name}}{{/toLower}}{{/toRustProp}}: args.{{#toRustProp}}{{#toLower}}{{name}}{{/toLower}}{{/toRustProp}},
        {{/arguments}}
    }{{/arguments.length}});
    serialize_{{#toLower}}{{name}}{{/toLower}}_result(result)
}
{{^last}}

{{/last}}
{{/methods}}