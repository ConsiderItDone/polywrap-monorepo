use polywrap_wasm_rs::{
    Context,
    Read,
    ReadDecoder,
    Write,
    WriteEncoder,
    WriteSizer,
};
use serde::{
    Deserialize,
    Serialize,
};
{{#propertyDeps.length}}

{{#propertyDeps}}
{{^isEnum}}
use {{crate}}::{{#toUpper}}{{type}}{{/toUpper}};
{{/isEnum}}
{{#isEnum}}
use crate::{
    {{#toUpper}}{{type}}{{/toUpper}},
    get_{{#toLower}}{{type}}{{/toLower}}_value,
    sanitize_{{#toLower}}{{type}}{{/toLower}}_value,
};
{{/isEnum}}
{{/propertyDeps}}
{{/propertyDeps.length}}
{{#methods}}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Input{{#toUpper}}{{name}}{{/toUpper}} {
    {{#arguments}}
    pub {{#toLower}}{{name}}{{/toLower}}: {{#noBox}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/noBox}},
    {{/arguments}}
}

pub fn deserialize_{{#toLower}}{{name}}{{/toLower}}_args(input: &[u8]) -> Result<Input{{#toUpper}}{{name}}{{/toUpper}}, String> {
    let mut context = Context::new();
    context.description = "Deserializing query-type: {{#toLower}}{{name}}{{/toLower}}".to_string();
    {{#arguments.length}}
    let mut reader = ReadDecoder::new(input, context);
    let mut num_of_fields = reader.read_map_length().unwrap();

    {{#arguments}}
    {{^object}}
    let mut _{{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
    {{/object}}
    {{#object}}
    {{#required}}
    let mut _{{#toLower}}{{name}}{{/toLower}}: Option<{{#toWasm}}{{toGraphQLType}}{{/toWasm}}> = None;
    {{/required}}
    {{^required}}
    let mut _{{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
    {{/required}}
    {{/object}}
    {{#required}}
    let mut _{{#toLower}}{{name}}{{/toLower}}_set = false;
    {{/required}}
    {{/arguments}}

    while num_of_fields > 0 {
        num_of_fields -= 1;
        let field = reader.read_string().unwrap();

        match field.as_str() {
            {{#arguments}}
            "{{#toLower}}{{name}}{{/toLower}}" => {
                reader.context().push(&field, "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "type found, reading argument");
                {{#scalar}}
                _{{#toLower}}{{name}}{{/toLower}} = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(){{#required}}.unwrap(){{/required}};
                {{/scalar}}
                {{#array}}
                _{{#toLower}}{{name}}{{/toLower}} = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(|reader| {
                    {{> deserialize_array}}
                }){{#required}}.expect("Failed to read array"){{/required}};
                {{/array}}
                {{#enum}}
                {{> deserialize_enum}}
                _{{#toLower}}{{name}}{{/toLower}} = value;
                {{/enum}}
                {{#object}}
                {{> deserialize_object}}
                _{{#toLower}}{{name}}{{/toLower}} = object;
                {{/object}}
                {{#required}}
                _{{#toLower}}{{name}}{{/toLower}}_set = true;
                {{/required}}
                reader.context().pop();
            }
            {{/arguments}}
            _ => {}
        }
    }
    {{#arguments}}
    {{#required}}
    if !_{{#toLower}}{{name}}{{/toLower}}_set {
        let custom_error = reader.context().print_with_context("Missing required argument: '{{name}}: {{type}}'");
        return Err(custom_error);
    }
    {{/required}}
    {{/arguments}}
    {{/arguments.length}}

    Ok(Input{{#toUpper}}{{name}}{{/toUpper}} {
        {{#arguments}}
        {{^object}}
        {{#toLower}}{{name}}{{/toLower}}: _{{#toLower}}{{name}}{{/toLower}},
        {{/object}}
        {{#object}}
        {{^required}}
        {{#toLower}}{{name}}{{/toLower}}: _{{#toLower}}{{name}}{{/toLower}},
        {{/required}}
        {{#required}}
        {{#toLower}}{{name}}{{/toLower}}: match _{{#toLower}}{{name}}{{/toLower}} {
            Some(x) => return x,
            None => panic!("'{{#toLower}}{{name}}{{/toLower}}' is required, but its value is still 'None'. This should never happen."),
        },
        {{/required}}
        {{/object}}
        {{/arguments}}
    })
}

pub fn serialize_{{#toLower}}{{name}}{{/toLower}}_result(input: {{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}) -> Vec<u8> {
    let mut sizer_context = Context::new();
    sizer_context.description = "Serializing (sizing) query-type: {{#toLower}}{{name}}{{/toLower}}".to_string();
    let mut sizer = WriteSizer::new(sizer_context);
    write_{{#toLower}}{{name}}{{/toLower}}_result(input, &mut sizer);
    let buffer: Vec<u8> = Vec::with_capacity(sizer.get_length() as usize);
    let mut encoder_context = Context::new();
    encoder_context.description = "Serializing (encoding) query-type: {{#toLower}}{{name}}{{/toLower}}".to_string();
    let mut encoder = WriteEncoder::new(&buffer, encoder_context);
    write_{{#toLower}}{{name}}{{/toLower}}_result(input, &mut encoder);
    buffer
}

pub fn write_{{#toLower}}{{name}}{{/toLower}}_result<W: Write>(input: {{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}, writer: &mut W) {
    {{#return}}
    writer.context().push("{{#toLower}}{{name}}{{/toLower}}", "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "writing result");
    {{#scalar}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(input);
    {{/scalar}}
    {{#array}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(&input.{{#toLower}}{{name}}{{/toLower}}, |writer: &mut W, item| {
        {{> serialize_array}}
    });
    {{/array}}
    {{#enum}}
    {{#required}}
    writer.write_i32(input.{{#toLower}}{{name}}{{/toLower}} as i32);
    {{/required}}
    {{^required}}
    writer.write_nullable_i32(&Some(input.{{#toLower}}{{name}}{{/toLower}}.unwrap() as i32));
    {{/required}}
    {{/enum}}
    {{#object}}
    {{#required}}
    {{#toUpper}}{{name}}{{/toUpper}}::write(&input.{{#toLower}}{{name}}{{/toLower}}, writer);
    {{/required}}
    {{^required}}
    if input.{{#toLower}}{{name}}{{/toLower}}.is_some() {
        {{#toUpper}}{{name}}{{/toUpper}}::write(input.{{#toLower}}{{name}}{{/toLower}}.as_ref().as_ref().unwrap(), writer);
    } else {
        writer.write_nil();
    }
    {{/required}}
    {{/object}}
    writer.context().pop();
    {{/return}}
}
{{/methods}}