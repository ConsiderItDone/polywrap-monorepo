{{#__commonImport}}
use crate::{
    get_{{#toLower}}{{type}}{{/toLower}}_value, 
    sanitize_{{#toLower}}{{type}}{{/toLower}}_value, 
    {{type}},
};
use crate::{
    Context, 
    Read, 
    ReadDecoder, 
    Write, 
    WriteEncoder, 
    WriteSizer,
};
use serde::{
    Deserialize, 
    Serialize,
};
use std::convert::{
    TryFrom, 
    TryInto,
};
{{/__commonImport}}

{{#methods}}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Input{{#toUpper}}{{name}}{{/toUpper}} {
    {{#arguments}}
    pub {{#toRustProp}}{{#toLower}}{{name}}{{/toLower}}{{/toRustProp}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}},
    {{/arguments}}
}

pub fn deserialize_{{#toLower}}{{name}}{{/toLower}}_args(args_buf: &[u8]) -> Result<Input{{#toUpper}}{{name}}{{/toUpper}}, String> {
    let mut context = Context::new();
    context.description = "Deserializing query-type: {{#toLower}}{{name}}{{/toLower}}".to_string();
    {{#arguments.length}}
    let mut reader = ReadDecoder::new(args_buf, context);
    let mut num_of_fields = reader.read_map_length().unwrap_or_default();

    {{#arguments}}
    {{^object}}
    let mut {{#toRustProp}}{{#toLower}}{{name}}{{/toLower}}{{/toRustProp}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
    {{/object}}
    {{#object}}
    {{#required}}
    let mut {{#toRustProp}}{{#toLower}}{{name}}{{/toLower}}{{/toRustProp}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = None;
    {{/required}}
    {{^required}}
    let mut {{#toRustProp}}{{#toLower}}{{name}}{{/toLower}}{{/toRustProp}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
    {{/required}}
    {{/object}}
    {{#required}}
    let mut {{#toLower}}{{name}}{{/toLower}}_set = false;
    {{/required}}
    {{/arguments}}

    while num_of_fields > 0 {
        num_of_fields -= 1;
        let field = reader.read_string().unwrap_or_default();

        {{#arguments}}
        match field.as_str() {
            "{{#toRustProp}}{{#toLower}}{{name}}{{/toLower}}{{/toRustProp}}" => {
                reader
                    .context()
                    .push(&field, "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "type found, reading property");
                {{#scalar}}
                {{#toRustProp}}{{#toLower}}{{name}}{{/toLower}}{{/toRustProp}} = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}().unwrap_or_default();
                {{/scalar}}
                {{#array}}
                {{#toRustProp}}{{#toLower}}{{name}}{{/toLower}}{{/toRustProp}} = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(|reader| {
                    {{> deserialize_array}}
                }).expect("Failed to read array");
                {{/array}}
                {{#enum}}
                {{> deserialize_enum}}
                {{/enum}}
                {{#object}}
                {{> deserialize_object}}
                {{/object}}
                {{#required}}
                {{#toLower}}{{name}}{{/toLower}}_set = true;
                {{/required}}
                reader
                    .context()
                    .pop()
                    .expect("Failed to pop {{#toWasm}}{{toGraphQLType}}{{/toWasm}} from Context");
            }
        }
        {{/arguments}}
    }

    {{#arguments}}
    {{#required}}
    {{^object}}
    if !{{#toLower}}{{name}}{{/toLower}}_set {
    {{/object}}
      let custom_error = reader.context().print_with_context("Missing required argument: '{{#toLower}}{{name}}{{/toLower}}: {{#toUpper}}{{type}}{{/toUpper}}'");
      return Err(custom_error);
    }
    {{/required}}
    {{/arguments}}
    {{/arguments.length}}

    Ok(Input{{#toUpper}}{{name}}{{/toUpper}} {
        {{#arguments}}
        {{#toRustProp}}{{#toLower}}{{name}}{{/toLower}}{{/toRustProp}},
        {{/arguments}}
    })
}

pub fn serialize_{{#toLower}}{{name}}{{/toLower}}_result(result: {{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}) -> Vec<u8> {
    let mut sizer_context = Context::new();
    sizer_context.description = "Serializing (sizing) query-type: {{#toLower}}{{name}}{{/toLower}}".to_string();
    let mut sizer = WriteSizer::new(sizer_context);
    write_{{#toLower}}{{name}}{{/toLower}}_result(result, &mut sizer);
    let buffer: Vec<u8> = Vec::with_capacity(sizer.get_length() as usize);
    let mut encoder_context = Context::new();
    encoder_context.description = "Serializing (encoding) query-type: {{#toLower}}{{name}}{{/toLower}}".to_string();
    let mut encoder = WriteEncoder::new(buffer.as_slice(), encoder_context);
    write_{{#toLower}}{{name}}{{/toLower}}_result(result, &mut encoder);
    buffer
}

pub fn write_{{#toLower}}{{name}}{{/toLower}}_result<W: Write>(result: {{#toWasm}}{{toGraphQLType}}{{/toWasm}}, writer: &mut W) {
    writer
        .context()
        .push("{{#toLower}}{{name}}{{/toLower}}", "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "writing property");
    {{#scalar}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(&result);
    {{/scalar}}
    {{#object}}
    {{^required}}
    if result.{{#toRustProp}}{{#toLower}}{{name}}{{/toLower}}{{/toRustProp}}.is_some() {
        {{type}}::write(&result.{{#toRustProp}}{{#toLower}}{{name}}{{/toLower}}{{/toRustProp}}.as_ref().unwrap(), writer);
    } else {
        writer.write_nil();
    }
    {{/required}}
    {{/object}}
    writer
        .context()
        .pop()
        .expect("Failed to pop {{#toWasm}}{{toGraphQLType}}{{/toWasm}} from Context");
}
{{/methods}}