{{^__commonImport}}
use crate::{
    get_{{#toLower}}{{type}}{{/toLower}}_value, 
    sanitize_{{#toLower}}{{type}}{{/toLower}}_value, 
    {{#toUpper}}{{type}}{{/toUpper}},
};
use num_bigint::BigInt;
use num_traits::cast::FromPrimitive;
use polywrap_wasm_rs::{
    Context, 
    Read, 
    ReadDecoder, 
    Write, 
    WriteEncoder, 
    WriteSizer,
};
use std::convert::TryFrom;

pub fn serialize_{{#toLower}}{{type}}{{/toLower}}(input: &{{#toUpper}}{{type}}{{/toUpper}}) -> Vec<u8> {
    let mut sizer_context = Context::new();
    sizer_context.description = "Serializing (sizing) object-type: {{#toUpper}}{{type}}{{/toUpper}}".to_string();
    let mut sizer = WriteSizer::new(sizer_context);
    write_{{#toLower}}{{type}}{{/toLower}}(input, &mut sizer);
    let buffer: Vec<u8> = Vec::with_capacity(sizer.get_length() as usize);
    let mut encoder_context = Context::new();
    encoder_context.description = "Serializing (encoding) object-type: {{#toUpper}}{{type}}{{/toUpper}}".to_string();
    let mut encoder = WriteEncoder::new(&buffer, encoder_context);
    write_{{#toLower}}{{type}}{{/toLower}}(input, &mut encoder);
    buffer
}

pub fn write_{{#toLower}}{{type}}{{/toLower}}<W: Write>(input: &{{#toUpper}}{{type}}{{/toUpper}}, writer: &mut W) {
    writer.write_map_length({{properties.length}});
    {{#properties}}
    writer.context().push("{{#toLower}}{{name}}{{/toLower}}", "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "writing property");
    writer.write_string("{{#toLower}}{{name}}{{/toLower}}");
    {{#scalar}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(input.{{#toLower}}{{name}}{{/toLower}});
    {{/scalar}}
    {{#array}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(&input.{{#toLower}}{{name}}{{/toLower}}, |writer: &mut W, input| {
        {{> serialize_array}}
    });
    {{/array}}
    {{#object}}
    {{#required}}
    {{#toUpper}}{{type}}{{/toUpper}}::write(&input.{{#toLower}}{{name}}{{/toLower}}, writer);
    {{/required}}
    {{^required}}
    if input.{{#toLower}}{{name}}{{/toLower}}.is_some() {
        {{#toUpper}}{{type}}{{/toUpper}}::write(input.{{#toLower}}{{name}}{{/toLower}}.as_ref().as_ref().unwrap(), writer);
    } else {
        writer.write_nil();
    }
    {{/required}}
    {{/object}}
    {{#enum}}
    {{#required}}
    writer.write_i32(input.{{#toLower}}{{name}}{{/toLower}} as i32);
    {{/required}}
    {{^required}}
    writer.write_nullable_i32(&Some(input.{{#toLower}}{{name}}{{/toLower}}.unwrap() as i32));
    {{/required}}
    {{/enum}}
    writer.context().pop().expect("Failed to pop {{#toWasm}}{{toGraphQLType}}{{/toWasm}} from Context");
    {{/properties}}
}

pub fn deserialize_{{#toLower}}{{type}}{{/toLower}}(input: &[u8]) -> {{#toUpper}}{{type}}{{/toUpper}} {
    let mut context = Context::new();
    context.description = "Deserializing object-type: {{#toUpper}}{{type}}{{/toUpper}}".to_string();
    let mut reader = ReadDecoder::new(input, context);
    read_{{#toLower}}{{type}}{{/toLower}}(&mut reader).expect("Failed to deserialize {{#toUpper}}{{type}}{{/toUpper}}")
}

pub fn read_{{#toLower}}{{type}}{{/toLower}}<R: Read>(reader: &mut R) -> Result<{{#toUpper}}{{type}}{{/toUpper}}, String> {
    let mut num_of_fields = reader.read_map_length().unwrap_or_default();

    {{#properties}}
    {{^object}}
    let mut {{#toLower}}{{name}}{{/toLower}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
    {{/object}}
    {{#object}}
    {{#required}}
    let mut {{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = None;
    {{/required}}
    {{^required}}
    let mut {{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
    {{/required}}
    {{/object}}
    {{#required}}
    let mut {{#toLower}}{{name}}{{/toLower}}_set = false;
    {{/required}}
    {{/properties}}

    while num_of_fields > 0 {
        num_of_fields -= 1;
        let field = reader.read_string().unwrap_or_default();

        match field.as_str() {
            {{^properties}}
            "{{#toLower}}{{name}}{{/toLower}}" => {
                reader.context().push(&field, "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "type found, reading property");
                {{#scalar}}
                {{#toLower}}{{name}}{{/toLower}} = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}().unwrap_or_default();
                {{/scalar}}
                {{#array}}
                {{#toLower}}{{name}}{{/toLower}} = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(|reader| {
                    {{> deserialize_array}}
                }).expect("Failed to read array");
                {{/array}}
                {{#enum}}
                {{> deserialize_enum}}
                {{/enum}}
                {{#object}}
                {{> deserialize_object}}
                {{/object}}
                {{#required}}
                {{#toLower}}{{name}}{{/toLower}}_set = true;
                {{/required}}
                reader.context().pop().expect("Failed to pop {{#toWasm}}{{toGraphQLType}}{{/toWasm}} from Context");
            }
            {{/properties}}
            _ => {
                reader.context().push(&field, "unknown", "searching for property type");
                reader.context().pop().expect("Failed to pop unknown from Context");
            }
        }
    }
    {{#properties}}
    {{#required}}
    {{#object}}
    if !{{#toLower}}{{name}}{{/toLower}}_set {
    {{/object}}
        let custom_error = reader.context().print_with_context("Missing required property: '{{#toLower}}{{name}}{{/toLower}}: {{#toUpper}}{{type}}{{/toUpper}}'");
        return Err(custom_error);
    }
    {{/required}}
    {{/properties}}

    Ok({{#toUpper}}{{type}}{{/toUpper}} {
        {{#properties}}
        {{#toLower}}{{name}}{{/toLower}},
        {{/properties}}
    })
}
{{/__commonImport}}