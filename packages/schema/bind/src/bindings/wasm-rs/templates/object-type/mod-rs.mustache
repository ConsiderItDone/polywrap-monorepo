{{#__commonImport}}
pub use super::common::{{#toUpper}}{{type}}{{/toUpper}};
{{/__commonImport}}
{{^__commonImport}}
pub mod serialization;
use crate::{ 
    {{#toUpper}}{{type}}{{/toUpper}}, 
};
use crate::{
    Read, 
    Write,
};
use num_bigint::BigInt;
use serde::{
    Deserialize, 
    Serialize,
};
pub use serialization::{
    deserialize_{{#toLower}}{{type}}{{/toLower}},
    read_{{#toLower}}{{type}}{{/toLower}},
    serialize_{{#toLower}}{{type}}{{/toLower}},
    write_{{#toLower}}{{type}}{{/toLower}},
};

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct {{#toUpper}}{{type}}{{/toUpper}} {
    {{#properties}}
    pub {{#toRustProp}}{{#toLower}}{{name}}{{/toLower}}{{/toRustProp}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}},
    {{/properties}}
}

impl {{#toUpper}}{{type}}{{/toUpper}} {
    pub fn to_buffer(object: &{{#toUpper}}{{type}}{{/toUpper}}) -> Vec<u8> {
        serialize_{{#toLower}}{{name}}{{/toLower}}(object)
    }

    pub fn from_buffer(buffer: &[u8]) -> {{#toUpper}}{{type}}{{/toUpper}} {
        deserialize_{{#toLower}}{{name}}{{/toLower}}(buffer)
    }

    pub fn write<W: Write>(object: &{{#toUpper}}{{type}}{{/toUpper}}, writer: &mut W) {
        write_{{#toLower}}{{name}}{{/toLower}}(object, writer);
    }

    pub fn read<R: Read>(reader: &mut R) -> {{#toUpper}}{{type}}{{/toUpper}} {
        read_{{#toLower}}{{name}}{{/toLower}}(reader).expect("Failed to read {{#toUpper}}{{type}}{{/toUpper}}")
    }
}
{{/__commonImport}}
