{{#__commonImport}}
pub use super::common::{{type}};
{{/__commonImport}}
{{^__commonImport}}
pub mod serialization;
use crate::{ {{type}}, };
use crate::{Read, Write};
use num_bigint::BigInt;
use serde::{Deserialize, Serialize};
pub use serialization::{
    deserialize_{{#toLower}}{{type}}{{/toLower}},
    read_{{#toLower}}{{type}}{{/toLower}},
    serialize_{{#toLower}}{{type}}{{/toLower}},
    write_{{#toLower}}{{type}}{{/toLower}},
};

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct {{type}} {
    {{#properties}}
    pub {{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}},
    {{/properties}}
}

impl {{type}} {
    {{^required}}
    pub fn new() -> {{type}} {
        {{type}} {
            prop: None,
            circular: Box::new(None),
        }
    }
    {{/required}}
    pub fn to_buffer(object: &{{type}}) -> Vec<u8> {
        serialize_{{#toLower}}{{name}}{{/toLower}}(object)
    }

    pub fn from_buffer(buffer: &[u8]) -> {{type}} {
        deserialize_{{#toLower}}{{name}}{{/toLower}}(buffer)
    }

    pub fn write<W: Write>(object: &{{type}}, writer: &mut W) {
        write_{{#toLower}}{{name}}{{/toLower}}(object, writer);
    }

    pub fn read<R: Read>(reader: &mut R) -> {{type}} {
        read_{{#toLower}}{{name}}{{/toLower}}(reader).expect("Failed to read {{type}}")
    }
}
{{/__commonImport}}
