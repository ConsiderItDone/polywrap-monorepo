{{#__commonImport}}
use serde::{Deserialize, Serialize};
use std::convert::TryFrom;
use std::io::{Error, ErrorKind};
pub use super::common::{
    get_{{#toLower}}{{type}}{{/toLower}}_key, 
    get_{{#toLower}}{{type}}{{/toLower}}_value, 
    sanitize_{{#toLower}}{{type}}{{/toLower}}_value, 
    {{type}},
};
{{/__commonImport}}
{{^__commonImport}}
#[derive(Clone, Debug, Deserialize, Serialize)]
#[repr(i32)]
pub enum {{type}} {
    {{#constants}}
    {{.}},
    {{/constants}}
    _MAX_,
}

impl TryFrom<i32> for {{type}} {
    type Error = &'static str;

    fn try_from(v: i32) -> Result<{{type}}, {{type}}::Error> {
        match v {
            {{#constants}}
            x if x == {{type}}::{{.}} as i32 => Ok({{type}}::{{.}}),
            {{/constants}}
            x if x == {{type}}::_MAX_ as i32 => Ok({{type}}::_MAX_),
            _ => Err("Error converting {{type}} to i32"),
        }
    }
}

pub fn sanitize_{{#toLower}}{{type}}{{/toLower}}_value(value: i32) -> Result<(), Error> {
    let max_as_i32 = {{type}}::_MAX_ as i32;
    let valid = value >= 0 && value < max_as_i32;
    if !valid {
        let custom_error = format!("Invalid value for enum '{{type}}': {}", value.to_string());
        return Err(Error::new(ErrorKind::Other, custom_error));
    }
    Ok(())
}

pub fn get_{{#toLower}}{{type}}{{/toLower}}_value(key: &str) -> Result<{{type}}, Error> {
    {{#constants}}
    if key == "{{.}}" {
        return Ok({{type}}::{{.}});
    }
    {{/constants}}
    let custom_error = format!("Invalid key for enum '{{type}}': {}", key);
    return Err(Error::new(ErrorKind::Other, custom_error));
}

pub fn get_{{#toLower}}{{type}}{{/toLower}}_key(value: {{type}}) -> String {
    if let Ok(_) = sanitize_{{#toLower}}{{type}}{{/toLower}}_value(value.clone() as i32) {
        return match value {
            {{#constants}}
            {{type}}::{{.}} => "{{.}}".to_string(),
            {{/constants}}
            _ => {
                format!(
                    "Invalid value for enum '{{type}}': {}",
                    (value as i32).to_string()
                )
            }
        };
    } else {
        format!("")
    }
}
{{/__commonImport}}