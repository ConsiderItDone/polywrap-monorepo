{{#methods.length}}
import { wrap_load_env } from "@polywrap/wasm-as";
import {
  {{#methods}}
  {{name}}{{^last}},{{/last}}
  {{/methods}}
} from "../../index";
import {
  {{#methods}}
  deserialize{{name}}Args,
  serialize{{name}}Result{{^last}},{{/last}}
  {{/methods}}
} from "./serialization";
{{/methods.length}}
import * as Types from "..";

{{#methods}}
export function {{name}}Wrapped(argsBuf: ArrayBuffer{{#hasEnv}}, env_size: u32{{/hasEnv}}): ArrayBuffer {
  {{#hasEnv}}
  {{#isEnvRequired}}
  if (env_size == 0) {
    throw new Error("Environment is not set, and it is required by method 'objectMethod'")
  }
  
  const envBuf = wrap_load_env(env_size);
  const env = Types.Env.fromBuffer(envBuf);
  {{/isEnvRequired}}
  {{^isEnvRequired}}
  let env: Types.Env | null = null;
  if (env_size > 0) {
    const envBuf = wrap_load_env(env_size);
    env = Types.Env.fromBuffer(envBuf);
  }
  {{/isEnvRequired}}
  {{/hasEnv}}
  {{#arguments.length}}
  const args = deserialize{{name}}Args(argsBuf{{#hasEnv}}, env{{/hasEnv}});
  {{/arguments.length}}

  const result = {{name}}({{#arguments.length}}{
    {{#arguments}}
    {{^isEnv}}{{#handleKeywords}}{{name}}{{/handleKeywords}}: args.{{#handleKeywords}}{{name}}{{/handleKeywords}}{{^last}},{{/last}}{{/isEnv}}{{#isEnv}}{{#handleKeywords}}{{name}}{{/handleKeywords}}{{^last}},{{/last}}{{/isEnv}}
    {{/arguments}}
  }{{/arguments.length}});
  return serialize{{name}}Result(result);
}
{{^last}}

{{/last}}
{{/methods}}
