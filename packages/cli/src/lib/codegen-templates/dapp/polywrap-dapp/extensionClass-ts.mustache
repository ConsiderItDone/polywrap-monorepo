{{#queryTypes}}
import { {{#title}}{{namespace}}{{/title}}{{type}}Extension,  {{#title}}{{namespace}}{{/title}}{{type}}Module } from "./{{#lowerFirst}}{{type}}{{/lowerFirst}}";
{{/queryTypes}}
import { Client, Uri, Extension, ExtensionConfig, SanitizedExtensionConfig } from "@web3api/core-js";

export interface I{{#title}}{{namespace}}{{/title}} extends Extension {
{{#queryTypes}}
  {{#lowerFirst}}{{type}}{{/lowerFirst}}: {{#title}}{{namespace}}{{/title}}{{type}}Module;
{{/queryTypes}}
}

export class {{#title}}{{namespace}}{{/title}} implements I{{#title}}{{namespace}}{{/title}} {

  private client: Client;
  readonly buildUri: Uri = new Uri("{{uri}}");
  readonly config: SanitizedExtensionConfig;
{{#queryTypes}}
  readonly {{#lowerFirst}}{{type}}{{/lowerFirst}}: {{#title}}{{namespace}}{{/title}}{{type}}Module;
{{/queryTypes}}

  constructor(client: Client, config?: ExtensionConfig) {
    this.client = client;
    this.config = this.sanitizeConfig(config);
  {{#queryTypes}}
    this.{{#lowerFirst}}{{type}}{{/lowerFirst}} = new {{#title}}{{namespace}}{{/title}}{{type}}Extension(this.client, this.config.uri);
  {{/queryTypes}}
    this.validate();
  }

  private validate(): boolean {
    // Not implemented
    return true;
  }

  private sanitizeConfig(userConfig?: ExtensionConfig): SanitizedExtensionConfig {
    const sanitized: ExtensionConfig = {};
    sanitized.uri = this.sanitizeUri(userConfig?.uri) ?? this.buildUri;
    return sanitized as SanitizedExtensionConfig;
  }

  private sanitizeUri(uri?: Uri | string): Uri | undefined {
    if (uri && typeof uri === "string") {
      uri = new Uri(uri);
    }
    return uri as Uri | undefined;
  }
}