// @ts-noCheck
import {
  UInt,
  UInt8,
  UInt16,
  UInt32,
  Int,
  Int8,
  Int16,
  Int32,
  Bytes,
  BigInt,
  Json,
  String,
  Boolean
} from "../baseTypes";
import {
{{#objectTypes}}
  {{type}},
{{/objectTypes}}
{{#enumTypes}}
  {{type}}Enum,
  {{type}}String,
  {{type}},
{{/enumTypes}}
{{#importedObjectTypes}}
  {{type}},
{{/importedObjectTypes}}
{{#importedEnumTypes}}
  {{type}}Enum,
  {{type}}String,
  {{type}},
{{/importedEnumTypes}}
{{#importedQueryTypes}}
  {{type}},
{{/importedQueryTypes}}
} from "./types";
import { Client, Uri, InvokeApiOptions, InvokeApiResult } from "@web3api/core-js";

import * as {{type}} from "./{{#lowerFirst}}{{type}}{{/lowerFirst}}Types";

export interface {{#title}}{{namespace}}{{/title}}{{#title}}{{type}}{{/title}}Module {
  readonly config: {
  {{#methods}}
    {{name}}(input: {{#title}}{{type}}{{/title}}.Input_{{name}}): InvokeApiOptions;
  {{/methods}}
  }
{{#methods}}
  {{name}}(input: {{#title}}{{type}}{{/title}}.Input_{{name}}): Promise<{{#return}}{{#toTypescript}}{{toGraphQLType}}{{/toTypescript}}{{/return}}>;
{{/methods}}
}

export class {{#title}}{{namespace}}{{/title}}{{type}}Extension implements {{#title}}{{namespace}}{{/title}}{{type}}Module {

  private client: Client;
  private uri: Uri;

  constructor(client: Client, uri: Uri) {
    this.client = client;
    this.uri = uri;
  }

  readonly config = {
  {{#methods}}
    {{name}}: (input: {{#title}}{{type}}{{/title}}.Input_{{name}}): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: "{{type}}",
      method: "{{name}}",
      input: input,
    }),
  {{/methods}}
  }

{{#methods}}
  async {{name}}(
    input: {{#title}}{{type}}{{/title}}.Input_{{name}}
  ): Promise<{{#return}}{{#toTypescript}}{{toGraphQLType}}{{/toTypescript}}{{/return}}> {
    const options: InvokeApiOptions = this.config.{{name}}(input);
    const result: InvokeApiResult<{{#return}}{{#toTypescript}}{{toGraphQLType}}{{/toTypescript}}{{/return}}> = await this.client.invoke<{{#return}}{{#toTypescript}}{{toGraphQLType}}{{/toTypescript}}{{/return}}>(options);
    return this.throwIfError(result);
  }

{{/methods}}
  private throwIfError<T>(result: InvokeApiResult<T>): T {
    if (result.error) {
      throw result.error;
    }
    if (result.data === undefined) {
      throw Error(`Polywrap client returned 'undefined', but no errors were detected`);
    }
    return result.data;
  }
}