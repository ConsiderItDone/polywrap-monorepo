// @ts-noCheck
import {
  UInt,
  UInt8,
  UInt16,
  UInt32,
  Int,
  Int8,
  Int16,
  Int32,
  Bytes,
  BigInt,
  Json,
  String,
  Boolean
} from "../baseTypes";
import {
{{#objectTypes}}
  {{type}},
{{/objectTypes}}
{{#enumTypes}}
  {{type}}Enum,
  {{type}}String,
  {{type}},
{{/enumTypes}}
{{#importedObjectTypes}}
  {{type}},
{{/importedObjectTypes}}
{{#importedEnumTypes}}
  {{type}}Enum,
  {{type}}String,
  {{type}},
{{/importedEnumTypes}}
{{#importedQueryTypes}}
  {{type}},
{{/importedQueryTypes}}
} from "./types";
{{#queryTypes}}
import * as {{type}}Inputs from "./{{#lowerFirst}}{{type}}{{/lowerFirst}}";
{{/queryTypes}}
import { Client, Uri, ExtensionInvocation, Extension, ExtensionConfig, ExtensionFactory, InvokeApiOptions } from "@web3api/core-js";

export interface {{#title}}{{namespace}}{{/title}}ExtensionConfig extends ExtensionConfig {}

export interface I{{#title}}{{namespace}}{{/title}}Extension extends Extension, {{#trimTrailing}}{{#queryTypes}}{{type}}Inputs.{{#title}}{{namespace}}{{/title}}{{type}}Module, {{/queryTypes}}{{/trimTrailing}} {}

class {{#title}}{{namespace}}{{/title}}Extension implements I{{#title}}{{namespace}}{{/title}}Extension {

  readonly client: Client;
  readonly uri: Uri;
  readonly config: {{#title}}{{namespace}}{{/title}}ExtensionConfig;

  constructor(client: Client, config: {{#title}}{{namespace}}{{/title}}ExtensionConfig) {
    this.client = client;
    if (config?.uri) {
      if (typeof config.uri === "string") {
        this.uri = new Uri(config.uri);
      } else {
        this.uri = config.uri as Uri;
      }
    } else {
      this.uri = new Uri("{{uri}}");
    }
    this.config = config;
  }

{{#queryTypes}}
{{#methods}}
  {{name}}(
    input: {{#title}}{{type}}{{/title}}Inputs.Input_{{name}},
  ): ExtensionInvocation<{{#return}}{{#toTypescript}}{{toGraphQLType}}{{/toTypescript}}{{/return}}> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "{{type}}",
      method: "{{name}}",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<{{#return}}{{#toTypescript}}{{toGraphQLType}}{{/toTypescript}}{{/return}}>(options),
    };
  }

{{/methods}}
{{/queryTypes}}
}

export const {{#lowerFirst}}{{namespace}}{{/lowerFirst}}Extension: ExtensionFactory<{{#title}}{{namespace}}{{/title}}ExtensionConfig> = (
  opts: {{#title}}{{namespace}}{{/title}}ExtensionConfig
) => {
  return {
    factory: (client: Client) => new {{#title}}{{namespace}}{{/title}}Extension(client, opts),
    namespace: `{{namespace}}`
  };
};